/* automatically generated by rust-bindgen 0.64.0 */

pub const _MB_LEN_MAX: u32 = 1;
pub const _NEWLIB_VERSION: &[u8; 6usize] = b"4.1.0\0";
pub const _PICOLIBC_MINOR__: u32 = 7;
pub const _PICOLIBC_VERSION: &[u8; 6usize] = b"1.7.4\0";
pub const _PICOLIBC__: u32 = 1;
pub const __NEWLIB_MINOR__: u32 = 1;
pub const __NEWLIB_PATCHLEVEL__: u32 = 0;
pub const __NEWLIB__: u32 = 4;
pub const __PICOLIBC_MINOR__: u32 = 7;
pub const __PICOLIBC_PATCHLEVEL__: u32 = 4;
pub const __PICOLIBC_VERSION__: &[u8; 6usize] = b"1.7.4\0";
pub const __PICOLIBC__: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __ATFILE_VISIBLE: u32 = 1;
pub const __BSD_VISIBLE: u32 = 1;
pub const __GNU_VISIBLE: u32 = 0;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __LARGEFILE_VISIBLE: u32 = 0;
pub const __MISC_VISIBLE: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __SVID_VISIBLE: u32 = 1;
pub const __XSI_VISIBLE: u32 = 0;
pub const __SSP_FORTIFY_LEVEL: u32 = 0;
pub const __have_longlong64: u32 = 1;
pub const __have_long32: u32 = 1;
pub const ___int8_t_defined: u32 = 1;
pub const ___int16_t_defined: u32 = 1;
pub const ___int32_t_defined: u32 = 1;
pub const ___int64_t_defined: u32 = 1;
pub const ___int_least8_t_defined: u32 = 1;
pub const ___int_least16_t_defined: u32 = 1;
pub const ___int_least32_t_defined: u32 = 1;
pub const ___int_least64_t_defined: u32 = 1;
pub const __int20: u32 = 2;
pub const __int20__: u32 = 2;
pub const __INT8: &[u8; 3usize] = b"hh\0";
pub const __INT16: &[u8; 2usize] = b"h\0";
pub const __INT64: &[u8; 3usize] = b"ll\0";
pub const __FAST8: &[u8; 3usize] = b"hh\0";
pub const __FAST16: &[u8; 2usize] = b"h\0";
pub const __FAST64: &[u8; 3usize] = b"ll\0";
pub const __LEAST8: &[u8; 3usize] = b"hh\0";
pub const __LEAST16: &[u8; 2usize] = b"h\0";
pub const __LEAST64: &[u8; 3usize] = b"ll\0";
pub const __int8_t_defined: u32 = 1;
pub const __int16_t_defined: u32 = 1;
pub const __int32_t_defined: u32 = 1;
pub const __int64_t_defined: u32 = 1;
pub const __int_least8_t_defined: u32 = 1;
pub const __int_least16_t_defined: u32 = 1;
pub const __int_least32_t_defined: u32 = 1;
pub const __int_least64_t_defined: u32 = 1;
pub const __int_fast8_t_defined: u32 = 1;
pub const __int_fast16_t_defined: u32 = 1;
pub const __int_fast32_t_defined: u32 = 1;
pub const __int_fast64_t_defined: u32 = 1;
pub const WINT_MIN: u32 = 0;
pub type __int8_t = core::ffi::c_schar;
pub type __uint8_t = core::ffi::c_uchar;
pub type __int16_t = core::ffi::c_short;
pub type __uint16_t = core::ffi::c_ushort;
pub type __int32_t = core::ffi::c_int;
pub type __uint32_t = core::ffi::c_uint;
pub type __int64_t = core::ffi::c_longlong;
pub type __uint64_t = core::ffi::c_ulonglong;
pub type __int_least8_t = core::ffi::c_schar;
pub type __uint_least8_t = core::ffi::c_uchar;
pub type __int_least16_t = core::ffi::c_short;
pub type __uint_least16_t = core::ffi::c_ushort;
pub type __int_least32_t = core::ffi::c_int;
pub type __uint_least32_t = core::ffi::c_uint;
pub type __int_least64_t = core::ffi::c_longlong;
pub type __uint_least64_t = core::ffi::c_ulonglong;
pub type __intmax_t = core::ffi::c_longlong;
pub type __uintmax_t = core::ffi::c_ulonglong;
pub type __intptr_t = core::ffi::c_int;
pub type __uintptr_t = core::ffi::c_uint;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = core::ffi::c_schar;
pub type uint_fast8_t = core::ffi::c_uchar;
pub type int_fast16_t = core::ffi::c_short;
pub type uint_fast16_t = core::ffi::c_ushort;
pub type int_fast32_t = core::ffi::c_int;
pub type uint_fast32_t = core::ffi::c_uint;
pub type int_fast64_t = core::ffi::c_longlong;
pub type uint_fast64_t = core::ffi::c_ulonglong;
pub type target_s = core::ffi::c_void;
pub type bool_ = core::ffi::c_int;
extern "C" {
    pub fn bmp_set_wait_state_c(ws: core::ffi::c_uint);
}
extern "C" {
    pub fn cmd_swdp_scan(
        t: *const target_s,
        argc: core::ffi::c_int,
        argv: *mut *const core::ffi::c_char,
    ) -> bool_;
}
extern "C" {
    pub fn bmp_attach_c(target: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn bmp_detach_c(target: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn bmp_attached_c() -> bool_;
}
extern "C" {
    pub fn bmp_map_count_c(kind: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn bmp_map_get_c(
        arg1: core::ffi::c_uint,
        arg2: core::ffi::c_uint,
        start: *mut core::ffi::c_uint,
        size: *mut core::ffi::c_uint,
        blockSize: *mut core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn bmp_registers_count_c() -> core::ffi::c_uint;
}
extern "C" {
    pub fn bmp_read_register_c(reg: core::ffi::c_uint, val: *mut core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn bmp_target_description_c() -> *const core::ffi::c_char;
}
extern "C" {
    pub fn bmp_target_description_clear_c();
}
extern "C" {
    pub fn bmp_write_reg_c(reg: core::ffi::c_uint, value: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn bmp_read_reg_c(reg: core::ffi::c_uint, value: *mut core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn bmp_flash_erase_c(addr: core::ffi::c_uint, length: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn bmp_flash_write_c(
        addr: core::ffi::c_uint,
        length: core::ffi::c_uint,
        data: *const u8,
    ) -> bool_;
}
extern "C" {
    pub fn bmp_flash_complete_c() -> bool_;
}
extern "C" {
    pub fn bmp_get_target_voltage_c() -> f32;
}
extern "C" {
    pub fn bmp_mem_read_c(
        addr: core::ffi::c_uint,
        length: core::ffi::c_uint,
        data: *mut u8,
    ) -> bool_;
}
extern "C" {
    pub fn bmp_crc32_c(
        address: core::ffi::c_uint,
        length: core::ffi::c_uint,
        crc: *mut core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn bmp_reset_target_c() -> bool_;
}
extern "C" {
    pub fn bmp_add_breakpoint_c(
        type_: core::ffi::c_uint,
        address: core::ffi::c_uint,
        len: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn bmp_remove_breakpoint_c(
        type_: core::ffi::c_uint,
        address: core::ffi::c_uint,
        len: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn bmp_target_halt_resume_c(step: bool_) -> bool_;
}
extern "C" {
    pub fn bmp_target_halt_c() -> bool_;
}
extern "C" {
    pub fn bmp_poll_target_c(watchpoint: *mut core::ffi::c_uint) -> core::ffi::c_uint;
}
extern "C" {
    pub fn bmp_rpc_init_swd_c() -> bool_;
}
extern "C" {
    pub fn bmp_rpc_swd_in_c(value: *mut core::ffi::c_uint, nb_bits: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn bmp_rpc_swd_in_par_c(
        value: *mut core::ffi::c_uint,
        par: *mut bool_,
        nb_bits: core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn bmp_rpc_swd_out_c(value: core::ffi::c_uint, nb_bits: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn bmp_rpc_swd_out_par_c(value: core::ffi::c_uint, nb_bits: core::ffi::c_uint) -> bool_;
}
extern "C" {
    pub fn bmp_mem_write_c(
        address: core::ffi::c_uint,
        len: core::ffi::c_uint,
        data: *const u8,
    ) -> bool_;
}
extern "C" {
    pub fn bmp_adiv5_full_dp_read_c(
        device_index: core::ffi::c_uint,
        ap_selection: core::ffi::c_uint,
        address: u16,
        err: *mut i32,
        value: *mut core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn bmp_adiv5_full_dp_low_level_c(
        device_index: core::ffi::c_uint,
        ap_selection: core::ffi::c_uint,
        address: u16,
        value: core::ffi::c_uint,
        err: *mut i32,
        outvalue: *mut core::ffi::c_uint,
    ) -> bool_;
}
extern "C" {
    pub fn bmp_adiv5_ap_read_c(
        device_index: core::ffi::c_uint,
        ap_selection: core::ffi::c_uint,
        address: core::ffi::c_uint,
    ) -> core::ffi::c_uint;
}
extern "C" {
    pub fn bmp_adiv5_ap_write_c(
        device_index: core::ffi::c_uint,
        ap_selection: core::ffi::c_uint,
        address: core::ffi::c_uint,
        value: core::ffi::c_uint,
    );
}
extern "C" {
    pub fn bmp_adiv5_mem_read_c(
        device_index: core::ffi::c_uint,
        ap_selection: core::ffi::c_uint,
        csw: core::ffi::c_uint,
        address: core::ffi::c_uint,
        buffer: *mut u8,
        len: core::ffi::c_uint,
    ) -> i32;
}
extern "C" {
    pub fn bmp_adiv5_mem_write_c(
        device_index: core::ffi::c_uint,
        ap_selection: core::ffi::c_uint,
        csw: core::ffi::c_uint,
        address: core::ffi::c_uint,
        align: core::ffi::c_uint,
        buffer: *const u8,
        len: core::ffi::c_uint,
    ) -> i32;
}
extern "C" {
    pub fn platform_nrst_set_val(assert: bool_);
}
extern "C" {
    pub fn platform_nrst_get_val() -> bool_;
}
extern "C" {
    pub fn platform_target_voltage() -> *const core::ffi::c_char;
}
extern "C" {
    pub fn platform_target_clk_output_enable(enable: bool_);
}
extern "C" {
    pub fn Logger2(n: core::ffi::c_int, fmt: *const core::ffi::c_char);
}
extern "C" {
    pub fn list_enabled_boards() -> *const core::ffi::c_char;
}

SET(S ${BMP}/src CACHE INTERNAL "")
SET(T ${BMP}/src/target CACHE INTERNAL "")
SET(P ${BMP}/src/platforms CACHE INTERNAL "")

SET(myB ${CMAKE_CURRENT_SOURCE_DIR}/ CACHE INTERNAL "")

SET(B ${myB}/src CACHE INTERNAL "")

OPTION(SWINDLE_HOSTED  "Enable Hosted mode" OFF)

#----------------------------
# Supported boards
#----------------------------


SET(BOARD_STUB_FILE ${CMAKE_BINARY_DIR}/ln_board_stubs.h)

FILE(WRITE ${BOARD_STUB_FILE} "// Generated by cmake!\n")


MACRO(DECLARE_MCU mcu source probe)
        OPTION(${mcu} "adding support for ${mcu}")
        LIST(FIND LN_ALL_BOARDS ${mcu} does_exist)
        IF( ${does_exist} EQUAL -1)
                MESSAGE(ERROR "board : ${mcu} is not in available boards!")
                MESSAGE(FATAL_ERROR "available boards: ${LN_ALL_BOARDS}")
        ENDIF( ${does_exist} EQUAL -1)        
        LIST(FIND LN_ENABLED_BOARDS ${mcu} is_enabled)
        IF( ${is_enabled} EQUAL -1)
                LIST(APPEND disabled_boards ${mcu})
                FILE(APPEND  ${BOARD_STUB_FILE} "#define LN_BOARD_${mcu}_DISABLED 1\n")
                FILE(APPEND  ${BOARD_STUB_FILE} "BOARD_STUB(${probe});\n")                
                FOREACH(other ${ARGN})
                        FILE(APPEND  ${BOARD_STUB_FILE} "BOARD_STUB(${other});\n")                
                ENDFOREACH()
        ELSE()
                LIST(APPEND enabled_boards ${mcu})
                LIST(APPEND enabled_sources ${T}/${source})
                FILE(APPEND  ${BOARD_STUB_FILE} "#define LN_BOARD_${mcu}_ENABLED 1  /* ON */\n")
                STRING(APPEND STR_BOARD_ENABLED  "${mcu}:")
        ENDIF()
ENDMACRO(DECLARE_MCU mcu source)


DECLARE_MCU( CH32F1 ch32f1.c    ch32f1_probe)
DECLARE_MCU( EFM32 efm32.c      efm32_probe efm32_aap_probe)
DECLARE_MCU( IMXRT imxrt.c      imxrt_probe)
DECLARE_MCU( KINETIS kinetis.c  kinetis_probe kinetis_mdm_probe )
DECLARE_MCU( LMI lmi.c          lmi_probe)
DECLARE_MCU( LPC11XX lpc11xx.c  lpc11xx_probe)
DECLARE_MCU( LPC15XX lpc15xx.c  lpc15xx_probe)
DECLARE_MCU( LPC17XX lpc17xx.c  lpc17xx_probe)
DECLARE_MCU( LPC40XX lpc40xx.c  lpc40xx_probe)
DECLARE_MCU( LPC43XX lpc43xx.c  lpc43xx_probe)
DECLARE_MCU( LPC546XX lpc546xx.c  lpc546xx_probe )
DECLARE_MCU( LPC55XX lpc55xx.c  lpc55xx_probe lpc55_dp_prepare lpc55_dmap_probe )
DECLARE_MCU( MSP432  msp432.c   msp432_probe)
DECLARE_MCU( NRF51 nrf51.c      nrf51_probe nrf51_mdm_probe )
DECLARE_MCU( NRF91 nrf91.c      nrf91_probe )
DECLARE_MCU( NXPKE04 nxpke04.c  ke04_probe )
DECLARE_MCU( RENESAS_RA renesas_ra.c  renesas_ra_probe )
DECLARE_MCU( RENESAS_RZ renesas_rz.c  renesas_rz_probe )
DECLARE_MCU( RP rp.c            rp_probe rp_rescue_probe)
DECLARE_MCU( SAM3X sam3x.c      sam3x_probe samx7x_probe)
DECLARE_MCU( SAM4L sam4l.c      sam4l_probe)
DECLARE_MCU( SAMD samd.c        samd_probe)
DECLARE_MCU( SAMX5X samx5x.c    samx5x_probe)
DECLARE_MCU( SFDP sfdp.c        sfdp_probe)
DECLARE_MCU( STM32F1 stm32f1.c  stm32f1_probe gd32f1_probe mm32f3xx_probe mm32l0xx_probe  at32f40x_probe)
DECLARE_MCU( STM32F4 stm32f4.c  stm32f4_probe gd32f4_probe)
DECLARE_MCU( STM32G0 stm32g0.c  stm32g0_probe )
DECLARE_MCU( STM32H5 stm32h5.c  stm32h5_probe )
DECLARE_MCU( STM32H7 stm32h7.c  stm32h7_probe )
DECLARE_MCU( STM32L0 stm32l0.c  stm32l0_probe )
DECLARE_MCU( STM32L4 stm32l4.c  stm32l4_probe )
DECLARE_MCU( STM32MP15 stm32mp15.c stm32mp15_cm4_probe )
DECLARE_MCU( AT32FXXX  at32f43x.c  at32f43x_probe ) 
DECLARE_MCU( MSP432P4  msp432p4.c  msp432p4_probe  )
DECLARE_MCU( HC32L110  hc32l110.c  hc32l110_probe  )
DECLARE_MCU( MSP432E4  msp432e4.c  msp432e4_probe  )
DECLARE_MCU( S32K3XX   s32k3xx.c   s32k3xx_probe  )
DECLARE_MCU( PUYA      puya.c    puya_probe  )
DECLARE_MCU( CH579     ch576.c   ch579_probe  )

   
FILE(APPEND  ${BOARD_STUB_FILE} "#define LN_BOARDS_ENABLED \"${STR_BOARD_ENABLED}\"\n")
SET(BMP_EXTRA  ${B}/../../blackmagic_addon/)
SET(BOARDS      ${enabled_sources}
                ${BMP_EXTRA}/ch32v3xx.c
                #${BMP_EXTRA}/riscv_flashstub.c
                ${B}/bmp_disabledBoard.cpp
                ${T}/lpc_common.c                
                CACHE INTERNAL ""
        )

include_directories(${CMAKE_SOURCE_DIR}/blackmagic/libopencm3/include)
# ===========================================================================================
IF (SWINDLE_HOSTED) 
        
        #----------------------------
        # Hosted mode
        #----------------------------    
    find_package(PkgConfig)
    #pkg_check_modules( usb REQUIRED libusb-1.0)
    #pkg_check_modules( ftdi REQUIRED libftdi1)

    
    MESSAGE(STATUS "Building for hosted mode (${SWINDLE_HOSTED})")
    ADD_DEFINITIONS("-DBMD_IS_STDC=1")
    ADD_DEFINITIONS("-DPC_HOSTED=1")
    # if the next line is present, wchlink will not work
    ADD_DEFINITIONS("-DENABLE_DEBUG=1")

    # Set a dummy configuration for lnArduino so it builds
    SET(LN_EXT "arm_gd32fx" CACHE INTERNAL "")
    SET(LN_MCU "M3" CACHE INTERNAL "")
    ADD_DEFINITIONS("-DLN_ARCH=LN_ARCH_ARM")
    include(${ARDUINO_GD32_FREERTOS}/setup.cmake)

    include_directories(${S})
    include_directories(../)
    include_directories(../lnArduino/arm_gd32fx/boards/bluepill)

    SET(HOSTED ${BMP}/src/platforms/hosted CACHE INTERNAL "")
    SET(PC ${BMP}/src/platforms/hosted CACHE INTERNAL "")

    include_directories( ${HOSTED} ${BMP_EXTRA}/hosted/)
    
    SET(BM_HOSTED
            ${HOSTED}/bmp_remote.c 
            ${HOSTED}/platform.c   
            ${HOSTED}/debug.c   
            ${HOSTED}/remote/protocol_v0.c  
            ${HOSTED}/remote/protocol_v0_swd.c  
            ${HOSTED}/remote/protocol_v0_jtag.c  
            ${HOSTED}/remote/protocol_v0_adiv5.c  
            ${HOSTED}/remote/protocol_v1.c  
            ${HOSTED}/remote/protocol_v1_adiv5.c              
            ${HOSTED}/remote/protocol_v2.c  
            ${HOSTED}/remote/protocol_v3.c  
            ${HOSTED}/remote/protocol_v3_adiv5.c  
            ${HOSTED}/remote/protocol_v4.c  
            ${HOSTED}/remote/protocol_v4_adiv5.c  

            ${BMP_EXTRA}/hosted/remote_rv_protocol.c

            ${PC}/utils.c
            ${PC}/cli.c       
            ${PC}/probe_info.c
            ${T}/jtag_scan.c  
            ${T}/jtag_devs.c    
            ${T}/adiv5_jtag.c
            ${T}/spi.c

                #${PC}/../common/swdptap.c
                #${HOSTED}/bmp_serial.c      
                #${HOSTED}/dap.c
                #${HOSTED}/bmp_libusb.c
                #${BMP_EXTRA}/hosted/wchlink_riscv_dtm.c
                #${BMP_EXTRA}/hosted/riscv_dtm_wchlink.c
                #${BMP_EXTRA}/hosted/wchlink_rvswd.c
                #${BMP_EXTRA}/hosted/wchlink.c
                #${HOSTED}/remote/_swdptap.c
                #${PC}/cl_utils.c   
                #${PC}/gdb_if.c    
                #${PC}/serial_unix.c  
                #!!${B}/stubs.cpp                

            CACHE INTERNAL ""
            )
ELSE()  
# ===========================================================================================
        #----------------------------
        # "Normal" /Standalone mode
        #----------------------------
        MESSAGE(STATUS "Building for embedded mode (${SWINDLE_HOSTED})")
        ADD_DEFINITIONS("-DENABLE_DEBUG=1")
        ADD_DEFINITIONS("-DPLATFORM_IDENT=\"lnBMP\"")
        ADD_DEFINITIONS("-DPC_HOSTED=0")        
        ADD_DEFINITIONS("-include miniplatform.h")       
        ADD_DEFINITIONS("-DBMD_IS_STDC=1")
        include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
        #  add swindle target code and host connection stuff
        IF(USE_RP2040)
            SET(EXTRA _rp2040)
        ELSE()
            SET(EXTRA _ln)
        ENDIF()
        SET(BRIDGE_SRCS 
                ${B}/bridge.cpp 
                ${B}/bmp_gpio.cpp  
                ${B}/bmp_rvTap${EXTRA}.cpp   
                ${B}/bmp_swdTap${EXTRA}.cpp   
                ${B}/lnbmp_adiv5_swd.cpp   
                ${B}/bmp_adc${EXTRA}.cpp   
                ${B}/bmp_serial.cpp  
                ${B}/bmp_rs_gdb.cpp                
                ${B}/bmp_jtagstubs.cpp  
                        #!!${B}/stubs.cpp
                        #${B}/bmp_gdb.cpp
                        #!!${B}/bmp_stubs.cpp
                CACHE INTERNAL ""
                )
        include_directories( ${CMAKE_SOURCE_DIR}/swindle/include )
ENDIF()
# ===========================================================================================
#-------
SET(BM_SRC      ${S}/command.c                  
                ${S}/exception.c    
                ${S}/hex_utils.c                                 
                ${S}/timing.c 
                ${S}/maths_utils.c 

                #${S}/remote.c 
                #${S}/gdb_main.c 
                #${S}/gdb_packet.c
                #${S}/crc32.c    
                #${S}/morse.c     
                CACHE INTERNAL ""
                )
#------                    
SET(BM_TARGET   
                ${T}/adiv5.c    
                ${T}/adiv5_swd.c   
                ${T}/cortex.c
                ${T}/cortexm.c
                ${T}/riscv_debug.c  
                ${T}/riscv32.c                  
                ${T}/target_flash.c 
                ${T}/gdb_reg.c
                ${T}/target.c 
                ${T}/sfdp.c
                ${T}/spi.c
                ${T}/stm32_common.c
                        #${T}/riscv64.c      
                        #${S}/gdb_hostio.c 
                        #${T}/jtag_scan.c) ${T}/jtag_devs.c    ${T}/adiv5_jtagdp.c  
                        #${T}/cortexa.c    
                        #${T}/lmi.c      
                        #${T}/target_probe.c 

                CACHE INTERNAL ""
                )
#----------

add_library(libswindle STATIC ${BM_SRC} ${BRIDGE_SRCS}  ${BOARDS} ${BM_TARGET} ${BM_HOSTED} )
target_include_directories( libswindle PRIVATE ${BMP_EXTRA} ${CMAKE_CURRENT_SOURCE_DIR}/include)

IF (_HOSTED) 
target_include_directories( libswindle PUBLIC ${usb_INCLUDE_DIRS} ${ftdi_INCLUDE_DIRS} )
ENDIF()

# O0, O1, O2 => works, -Oz does not work


target_link_libraries( libswindle lnArduino)

IF(USE_RP2040)
        target_link_libraries( libswindle rplib)
ENDIF()


IF (SWINDLE_HOSTED) 
ELSE()
    target_link_libraries( libswindle tinyUsb)
ENDIF()
IF(USE_STLINK_PINOUT)
        target_compile_definitions(libswindle PRIVATE USE_STLINK_PINOUT)
ENDIF(USE_STLINK_PINOUT)
target_include_directories(libswindle PRIVATE  ${S}/include ${B}/include ${T} ${CMAKE_BINARY_DIR}/config )
target_include_directories(libswindle PRIVATE  ${myB}/private_include)

include_directories( ${BMP}/src/include)
include_directories( ${BMP}/src)
include_directories( ${BMP}/src/target)
#---------
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/rs/rs_swindle/c_interface bmp_c_interface)
IF (SWINDLE_HOSTED) 
    include(rnCmake)
    corrosion_import_crate(MANIFEST_PATH rs/rs_swindle/Cargo.toml    NO_DEFAULT_FEATURES      FLAGS ${LN_LTO_RUST_FLAGS} )
    corrosion_add_target_rustflags( rsbmp --cfg feature="hosted")
ELSE (SWINDLE_HOSTED) 
        add_subdirectory( rs )
        #
        # rvTap does not like -Oz
        # Something to fix here
        MESSAGE(STATUS "Restricting flags for rvTap to -Os")
        set_property(SOURCE src/bmp_rvTap.cpp  PROPERTY COMPILE_OPTIONS "-Ofast")
ENDIF (SWINDLE_HOSTED) 
#
MESSAGE(STATUS "Enabled boards  : ${enabled_boards}")
MESSAGE(STATUS "Enabled sources : ${BOARDS}")
MESSAGE(STATUS "Disabled boards : ${disabled_boards}")
 

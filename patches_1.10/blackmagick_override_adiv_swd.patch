diff --git a/src/target/adiv5_swd.c b/src/target/adiv5_swd.c
index c779778c..ea162ab8 100644
--- a/src/target/adiv5_swd.c
+++ b/src/target/adiv5_swd.c
@@ -31,6 +31,10 @@
 #include "target.h"
 #include "target_internal.h"
 
+uint32_t adiv5_swd_read_no_check(const uint16_t addr);
+bool adiv5_swd_write_no_check(const uint16_t addr, const uint32_t data);
+
+
 uint8_t make_packet_request(uint8_t RnW, uint16_t addr)
 {
 	bool APnDP = addr & ADIV5_APnDP;
@@ -125,7 +129,7 @@ static void jtag_to_swd_sequence(void)
 	swd_line_reset_sequence(true);
 }
 
-bool adiv5_swd_write_no_check(const uint16_t addr, const uint32_t data)
+bool old_adiv5_swd_write_no_check(const uint16_t addr, const uint32_t data)
 {
 	const uint8_t request = make_packet_request(ADIV5_LOW_WRITE, addr);
 	swd_proc.seq_out(request, 8U);
@@ -135,7 +139,7 @@ bool adiv5_swd_write_no_check(const uint16_t addr, const uint32_t data)
 	return res != SWDP_ACK_OK;
 }
 
-uint32_t adiv5_swd_read_no_check(const uint16_t addr)
+uint32_t old_adiv5_swd_read_no_check(const uint16_t addr)
 {
 	const uint8_t request = make_packet_request(ADIV5_LOW_READ, addr);
 	swd_proc.seq_out(request, 8U);
@@ -156,9 +160,13 @@ bool adiv5_swd_scan(const uint32_t targetid)
 		DEBUG_ERROR("calloc: failed in %s\n", __func__);
 		return false;
 	}
-
+  #if PC_HOSTED == 0
 	dp->write_no_check = adiv5_swd_write_no_check;
 	dp->read_no_check = adiv5_swd_read_no_check;
+  #else
+	dp->write_no_check = old_adiv5_swd_write_no_check;
+	dp->read_no_check = old_adiv5_swd_read_no_check;
+  #endif
 	dp->dp_read = adiv5_swd_read;
 	dp->low_access = adiv5_swd_raw_access;
 	dp->error = adiv5_swd_clear_error;
@@ -245,7 +253,6 @@ bool adiv5_swd_scan(const uint32_t targetid)
 		scan_multidrop = false;
 	}
 #endif
-
 	if (scan_multidrop)
 		adiv5_swd_multidrop_scan(dp, dp_targetid);
 	else {

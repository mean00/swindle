diff --git a/src/command.c b/src/command.c
index f77149b..9b8f584 100644
--- a/src/command.c
+++ b/src/command.c
@@ -46,6 +46,7 @@
 #include "traceswo.h"
 #endif
 
+/*static  */ bool cmd_rvswd_scan(target_s *target, int argc, const char **argv);
 static bool cmd_version(target_s *t, int argc, const char **argv);
 static bool cmd_help(target_s *t, int argc, const char **argv);
 
@@ -82,6 +83,7 @@ const command_s cmd_list[] = {
 	{"jtag_scan", cmd_jtag_scan, "Scan JTAG chain for devices"},
 	{"swd_scan", cmd_swd_scan, "Scan SWD interface for devices: [TARGET_ID]"},
 	{"swdp_scan", cmd_swd_scan, "Deprecated: use swd_scan instead"},
+	{"rvswdp_scan", cmd_rvswd_scan, "Scan RVSWD (WCH Risc-V) for devices"},
 	{"auto_scan", cmd_auto_scan, "Automatically scan all chain types for devices"},
 	{"frequency", cmd_frequency, "set minimum high and low times: [FREQ]"},
 	{"targets", cmd_targets, "Display list of available targets"},
@@ -689,3 +691,50 @@ static bool cmd_heapinfo(target_s *t, int argc, const char **argv)
 		gdb_outf("%s\n", "Set semihosting heapinfo: HEAP_BASE HEAP_LIMIT STACK_BASE STACK_LIMIT");
 	return true;
 }
+
+
+ 
+ bool cmd_rvswd_scan(target_s *target, int argc, const char **argv)
+ {
+ 	(void)target;
+ 	(void)argc;
+ 	(void)argv;
+ 
+ 	if (platform_target_voltage())
+ 		gdb_outf("Target voltage: %s\n", platform_target_voltage());
+ 
+ 	if (connect_assert_nrst)
+ 		platform_nrst_set_val(true); /* will be deasserted after attach */
+ 
+ 	bool scan_result = false;
+ 	volatile exception_s e;
+ 	TRY_CATCH (e, EXCEPTION_ALL) {
+ #if PC_HOSTED == 1
+ 		scan_result = bmda_rvswd_scan();
+ #else
+ 		scan_result = rvswd_scan();
+ #endif
+ 	}
+ 	switch (e.type) {
+ 	case EXCEPTION_TIMEOUT:
+ 		gdb_outf("Timeout during scan. Is target stuck in WFI?\n");
+ 		break;
+ 	case EXCEPTION_ERROR:
+ 		gdb_outf("Exception: %s\n", e.msg);
+ 		break;
+ 	}
+ 
+ 	if (!scan_result) {
+ 		platform_target_clk_output_enable(false);
+ 		platform_nrst_set_val(false);
+ 		gdb_out("RVSWD scan failed!\n");
+ 		return false;
+ 	}
+ 
+ 	cmd_targets(NULL, 0, NULL);
+ 	platform_target_clk_output_enable(false);
+ 	morse(NULL, false);
+ 	return true;
+ }
+ 
+
diff --git a/src/include/target.h b/src/include/target.h
index 1761080..934581d 100644
--- a/src/include/target.h
+++ b/src/include/target.h
@@ -43,6 +43,9 @@ typedef struct target_controller target_controller_s;
 #if PC_HOSTED == 1
 bool bmda_swd_scan(uint32_t targetid);
 bool bmda_jtag_scan(void);
+bool bmda_rvswd_scan(void);
+#else 
+bool rvswd_scan(void);  
 #endif
 bool adiv5_swd_scan(uint32_t targetid);
 bool jtag_scan(void);
diff --git a/src/target/riscv32.c b/src/target/riscv32.c
index 365126c..9135ad1 100644
--- a/src/target/riscv32.c
+++ b/src/target/riscv32.c
@@ -96,6 +96,11 @@ bool riscv32_probe(target_s *const target)
 	case JEP106_MANUFACTURER_RV_GIGADEVICE:
 		PROBE(gd32vf1_probe);
 		break;
+	case JEP106_MANUFACTURER_WCH:
+		PROBE(ch32v3xx_probe);
+		/*PROBE(ch32v003x_probe);
+		PROBE(ch32vx_probe);*/
+		break;
 	}
 
 #if PC_HOSTED == 0
diff --git a/src/target/target_probe.h b/src/target/target_probe.h
index 3e4efe5..523a521 100644
--- a/src/target/target_probe.h
+++ b/src/target/target_probe.h
@@ -96,5 +96,6 @@ bool imxrt_probe(target_s *target);
 bool zynq7_probe(target_s *target);
 
 void lpc55_dp_prepare(adiv5_debug_port_s *dp);
+bool ch32v3xx_probe(target_s *target);
 
 #endif /* TARGET_TARGET_PROBE_H */

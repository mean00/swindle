diff --git a/src/command.c b/src/command.c
index 1e44bbd5..a13aad0d 100644
--- a/src/command.c
+++ b/src/command.c
@@ -46,6 +46,7 @@
 #include "traceswo.h"
 #endif
 
+/*static  */ bool cmd_rvswd_scan(target_s *target, int argc, const char **argv);
 static bool cmd_version(target_s *t, int argc, const char **argv);
 static bool cmd_help(target_s *t, int argc, const char **argv);
 
@@ -82,6 +83,7 @@ const command_s cmd_list[] = {
 	{"jtag_scan", cmd_jtag_scan, "Scan JTAG chain for devices"},
 	{"swd_scan", cmd_swd_scan, "Scan SWD interface for devices: [TARGET_ID]"},
 	{"swdp_scan", cmd_swd_scan, "Deprecated: use swd_scan instead"},
+	{"rvswdp_scan", cmd_rvswd_scan, "Scan RVSWD (WCH Risc-V) for devices"},
 	{"auto_scan", cmd_auto_scan, "Automatically scan all chain types for devices"},
 	{"frequency", cmd_frequency, "set minimum high and low times: [FREQ]"},
 	{"targets", cmd_targets, "Display list of available targets"},
@@ -689,3 +691,50 @@ static bool cmd_heapinfo(target_s *t, int argc, const char **argv)
 		gdb_outf("%s\n", "Set semihosting heapinfo: HEAP_BASE HEAP_LIMIT STACK_BASE STACK_LIMIT");
 	return true;
 }
+
+
+ 
+ bool cmd_rvswd_scan(target_s *target, int argc, const char **argv)
+ {
+ 	(void)target;
+ 	(void)argc;
+ 	(void)argv;
+ 
+ 	if (platform_target_voltage())
+ 		gdb_outf("Target voltage: %s\n", platform_target_voltage());
+ 
+ 	if (connect_assert_nrst)
+ 		platform_nrst_set_val(true); /* will be deasserted after attach */
+ 
+ 	bool scan_result = false;
+ 	volatile exception_s e;
+ 	TRY_CATCH (e, EXCEPTION_ALL) {
+ #if PC_HOSTED == 1
+ 		scan_result = bmda_rvswd_scan();
+ #else
+ 		scan_result = false;
+ #endif
+ 	}
+ 	switch (e.type) {
+ 	case EXCEPTION_TIMEOUT:
+ 		gdb_outf("Timeout during scan. Is target stuck in WFI?\n");
+ 		break;
+ 	case EXCEPTION_ERROR:
+ 		gdb_outf("Exception: %s\n", e.msg);
+ 		break;
+ 	}
+ 
+ 	if (!scan_result) {
+ 		platform_target_clk_output_enable(false);
+ 		platform_nrst_set_val(false);
+ 		gdb_out("RVSWD scan failed!\n");
+ 		return false;
+ 	}
+ 
+ 	cmd_targets(NULL, 0, NULL);
+ 	platform_target_clk_output_enable(false);
+ 	morse(NULL, false);
+ 	return true;
+ }
+ 
+

// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //
#include "../swindle/private_include/lnRP2040_pio.h"
#include "lnGPIO.h"
#include "ln_rp_pio.h"
#include "stdint.h"
#define PICO_NO_HARDWARE 1
#include "ws.h"

extern "C" void user_init();

#ifdef USE_RP_ZERO
#define PIN_TO_USE GPIO16 // GPIO16 for zero, GPIO23 for normal size RP2040
#else
#define PIN_TO_USE GPIO23 // GPIO16 for zero, GPIO23 for normal size RP2040
#endif
#include "xsin_table.h"
void setup()
{
}
void loop()
{
    Logger("Starting picoSwindle\n");
    user_init();

    while (0)
    {
        lnDelayMs(100);
    }

    lnPin pin = PIN_TO_USE;
    rpPIO xpio(LN_WS2812_PIO_ENGINE);
    rpPIO_SM *xsm = xpio.getSm(0);

    lnPinModePIO(pin, LN_WS2812_PIO_ENGINE);

    rpPIO_pinConfig pinConfig;
    pinConfig.sets.pinNb = 1;
    pinConfig.sets.startPin = pin;
    pinConfig.outputs.pinNb = 1;
    pinConfig.outputs.startPin = pin;

    xsm->setSpeed(WS_SPEED);
    xsm->setBitOrder(false, true);
    xsm->uploadCode(sizeof(ws_program_instructions) / 2, ws_program_instructions, ws_wrap_target, ws_wrap);
    xsm->configure(pinConfig);
    xsm->setPinDir(pin, true);
    xsm->execute();

    int pix = 0;
    int inc = STEP;
    while (1)
    {
        uint32_t wait = xsin[pix] << 16;
        xsm->write(1, &wait);
        pix += inc;
        if (inc == STEP)
        {
            if (pix > 180 - STEP)
            {
                inc = -inc;
            }
        }
        else
        {
            if (pix == 0)
            {
                inc = -inc;
            }
        }
        lnDelayMs(6);
    }
}

//--
